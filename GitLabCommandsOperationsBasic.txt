#Configurar GIT
git config --global user.name "Tu Nombre"
git config --global user.email "tu_email@ejemplo.com"

#Clonar repositorio
git clone https://gitlab.com/usuario/proyecto.git

#Nombre de la rama
git checkout -b nombre-de-rama

#Cambiar a otra rama
git checkout nombre-de-rama

#Hacer push
git push origin nombre-de-rama

#Hacer pull
git pull origin nombre-de-rama

#Ver estado del repositorio
git status

#Agregar archivo / Agregar todos los archivos 
git add archivo / git add .

#Verificar las ramas disponibles
git branch -r
---------------------------------------------
        REGRESAR CAMBIOS
---------------------------------------------

//REGRESAR  MODIFICANDO HISTORIAL LOCAL
#git reset --hard <commit>

//NO CAMBIANDO EL HISTORIAL
#git revert <commit>

//REGRESAR MODIFICANDO HISTORIAL REMOTO
#git push --force

NO CAMBIANDO EL HISTORIAL
#git revert <commit>
---------------------------------------------
        CREAR MERGE REQUEST UNA VEZ EL PIPELINE ESTE SUCCESFULLY
---------------------------------------------
        
//crear merget request
#git push -o merge_request.create

//configurar merge_request
#git push -o merge_request.merge_when_pipeline_succeeds 

---------------------------------------------
        GUARDAR CAMBIOS EN STOP
---------------------------------------------
//Esto se usa para trabajar guardar cambios en una rama pero sin aplicar un cambio, simplemente guardar en un directorio limpio para trabajar
posteriormente en el 

//Guardar cambios, puedes cambiar de rama o hacer otra operacion y esos cambios seguiran en standbey
#git stash

//Recuperar de nuevo los cambios en lo que se ha estado trabajando
#git stash apply

//Tambien se puede eliminar los cambios hechos 
#git stash pop
---------------------------------------------
---------------------------------------------

#Traer todas las ramas sin fusionarlas
git fetch

#Subir camibios
git pull

#Descargar o clonar solo la rama especifica
git clone --branch nombre-de-rama https://gitlab.com/usuario/proyecto.git


#Revertir cambios
git log //buscar hash del commit a revertir
git revert commit-hash

#Corregir errores sin modificar el historial de commit
git commit --amend --no-edit file1 file2

#Comparar ramas
git diff branch1 branch2
	

#Crear proyecto a partir de la API de gitlab
curl --request POST --header "PRIVATE-TOKEN: <your_access_token>" \
--data "name=nombre_del_proyecto&visibility=private" \
"https://gitlab.example.com/api/v4/projects"

#Eliminar proyecto
curl --request DELETE --header "PRIVATE-TOKEN: <your_access_token>" \
"https://gitlab.example.com/api/v4/projects/:id"

#Eliminar rama
curl --request DELETE --header "PRIVATE-TOKEN: <your_access_token>" \
"https://gitlab.example.com/api/v4/projects/:id/repository/branches/:branch"


